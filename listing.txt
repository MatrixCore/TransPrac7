  Warning: FormalParameters is deletable
  Warning: Arguments is deletable

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019  */
  11 
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true;
  16 
  17   const bool
  18     known = true;
  19 
  20   // This next method might better be located in the code generator.  Traditionally
  21   // it has been left in the ATG file, but that might change in future years
  22   //
  23   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  24   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  25   // to know this!
  26 
  27   static string Unescape(string s) {
  28   /* Replaces escape sequences in s by their Unicode values */
  29     StringBuilder buf = new StringBuilder();
  30     int i = 0;
  31     while (i < s.Length) {
  32       if (s[i] == '\\') {
  33         switch (s[i+1]) {
  34           case '\\': buf.Append('\\'); break;
  35           case '\'': buf.Append('\''); break;
  36           case '\"': buf.Append('\"'); break;
  37           case  'r': buf.Append('\r'); break;
  38           case  'n': buf.Append('\n'); break;
  39           case  't': buf.Append('\t'); break;
  40           case  'b': buf.Append('\b'); break;
  41           case  'f': buf.Append('\f'); break;
  42           default:   buf.Append(s[i+1]); break;
  43         }
  44         i += 2;
  45       }
  46       else {
  47         buf.Append(s[i]);
  48         i++;
  49       }
  50     }
  51     return buf.ToString();
  52   } // Unescape
  53 
  54   // the following is global for expediency (fewer parameters needed)
  55 
  56   static Label mainEntryPoint = new Label(!known);
  57 
  58   static bool IsArith(int type) {
  59     return type == Types.intType || type == Types.noType;
  60   } // IsArith
  61 
  62   static bool IsBool(int type) {
  63     return type == Types.boolType || type == Types.noType;
  64   } // IsBool
  65 
  66   static bool IsArray(int type) {
  67     return (type % 2) == 1;
  68   } // IsArray
  69 
  70   static bool Compatible(int typeOne, int typeTwo) {
  71   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  72     return    typeOne == typeTwo
  73            || IsArith(typeOne) && IsArith(typeTwo)
  74            || typeOne == Types.noType
  75            || typeTwo == Types.noType
  76            || IsArray(typeOne) && typeTwo == Types.nullType
  77            || IsArray(typeTwo) && typeOne == Types.nullType;
  78   } // Compatible
  79 
  80   static bool Assignable(int typeOne, int typeTwo) {
  81   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  82     return    typeOne == typeTwo
  83            || typeOne == Types.noType
  84            || typeTwo == Types.noType
  85            || IsArray(typeOne) && typeTwo == Types.nullType;
  86   } // Assignable
  87 
  88   static bool IsCall(out DesType des) {
  89   // Used as an LL(1) conflict resolver variable/function name
  90     Entry entry = Table.Find(la.val);
  91     des = new DesType(entry);
  92     return entry.kind == Kinds.Fun;
  93   } // IsCall
  94 
  95 
  96 /* -------------------------------------------------------------------------- */
  97 
  98 CHARACTERS
  99   lf         = CHR(10) .
 100   backslash  = CHR(92) .
 101   control    = CHR(0) .. CHR(31) .
 102   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 103   digit      = "0123456789" .
 104   stringCh   = ANY - '"' - control - backslash .
 105   charCh     = ANY - "'" - control - backslash .
 106   printable  = ANY - control .
 107 
 108 TOKENS
 109   identifier = letter { { "_" } (letter | digit) } .
 110   number     = digit { digit } .
 111   stringLit  = '"' { stringCh | backslash printable } '"' .
 112   charLit    = "'" ( charCh   | backslash printable ) "'" .
 113 
 114 PRAGMAS
 115   DebugOn     = "$D+" .                      (. debug = true; .)
 116   DebugOff    = "$D-" .                      (. debug = false; .)
 117   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 118   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 119   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 120   GiveCOD     = "$C+" .						 (. .)
 121   NoGiveCOD	  = "$C-" .						 (. .)
 122 
 123 COMMENTS FROM "//" TO lf
 124 COMMENTS FROM "/*" TO "*/"
 125 
 126 IGNORE CHR(9) .. CHR(13)
 127 
 128 PRODUCTIONS
 129 
 130   Parva
 131                              (. CodeGen.FrameHeader();
 132 					     // no arguments
 133                                 CodeGen.Call(mainEntryPoint);
 134 						// forward, incomplete
 135                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 136   = {   FuncDeclaration } EOF  (. if 
 137 						(!mainEntryPoint.IsDefined())
 138                          SemError("missing Main function"); .)
 139   .
 140 
 141   FuncDeclaration
 142                        (. StackFrame frame = new StackFrame();
 143                           Entry function = new Entry(); .)
 144   =  "void" Ident<out function.name>  
 145 					(. function.kind = Kinds.Fun;
 146                               function.type = Types.voidType;
 147                               function.nParams = 0;
 148                               function.firstParam = null;
 149 	                  function.entryPoint = new Label(known);
 150                               Table.Insert(function);
 151                               Table.OpenScope(); .)
 152      "(" FormalParameters<function> ")"      
 153 				(. frame.size = CodeGen.headerSize + 
 154 					function.nParams;
 155                    if (function.name.ToUpper().Equals("MAIN")
 156                        && !mainEntryPoint.IsDefined()
 157                        && function.nParams == 0) {
 158                            mainEntryPoint.Here(); } .)
 159      Body<frame>              (. Table.CloseScope(); .)
 160   .
 161 
 162   FormalParameters<Entry func>  (. Entry param; .)
 163   = [ OneParam<out param, func> (. func.firstParam = param; .)
 164       { WEAK "," OneParam<out param, func> }
 165     ] .
 166 
 167   OneParam<out Entry param, Entry func>
 168 					(. param = new Entry();
 169                              param.kind = Kinds.Var;
 170            param.offset = CodeGen.headerSize + func.nParams;
 171                              func.nParams++; .)
 172   =  Type<out param.type>
 173      Ident<out param.name>         (. Table.Insert(param); .)
 174   .
 175 
 176   Body<StackFrame frame>       (. Label DSPLabel = new Label(known);
 177                                                 int sizeMark = frame.size;
 178                                                 CodeGen.OpenStackFrame(0); .)
 179   =  "{" { Statement<frame> }
 180      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 181                                                 CodeGen.LeaveVoidFunction();
 182                                               .) 
 183 .
 184 
 185   Statement<StackFrame frame>
 186   =  SYNC (   Block<frame>
 187             | ConstDeclarations
 188             | VarDeclarations<frame>
 189             | AssignmentOrCall
 190             | IfStatement<frame>
 191             | WhileStatement<frame>
 192             | HaltStatement
 193             | ReturnStatement
 194             | ReadStatement
 195             | WriteStatement
 196             | ";"
 197           ) .
 198 
 199   Block<StackFrame frame>
 200   =                                          (. Table.OpenScope(); .)
 201      "{" { Statement<frame> }
 202      WEAK "}"                                (. Table.CloseScope(); .)
 203   .
 204 
 205   ConstDeclarations
 206   = "const" OneConst { WEAK "," OneConst }
 207     WEAK ";"
 208   .
 209 
 210   OneConst                                   (. Entry constant = new Entry();
 211                                                 ConstRec con; .)
 212   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 213      AssignOp Constant<out con>              (. constant.value = con.value;
 214                                                 constant.type = con.type;
 215                                                 Table.Insert(constant); .)
 216   .
 217 
 218   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 219   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 220     | CharConst<out con.value>               (. con.type = Types.intType; .)
 221     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 222     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 223     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 224   .
 225 
 226   VarDeclarations<StackFrame frame>          (. int type; .)
 227   =  Type<out type>                          
 228      VarList<frame, type>
 229      WEAK ";"
 230   .
 231 
 232   Type<out int type>                         
 233   =   BasicType<out type>
 234        [ "[]"                                (. type++; .)
 235        ] .
 236 
 237   BasicType<out int type>                    (. type = Types.noType; .)
 238   =   "int"                                  (. type = Types.intType; .)
 239     | "bool"                                 (. type = Types.boolType; .)
 240   .
 241 
 242 
 243   VarList<StackFrame frame, int type>
 244   =  OneVar<frame, type>
 245      { WEAK "," OneVar<frame, type> }
 246   .
 247 
 248   OneVar<StackFrame frame, int type>         (. int expType;
 249                                                 Entry var = new Entry(); .)
 250   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 251                                                 var.type = type;
 252                                                 var.offset = frame.size;
 253                                                 frame.size++; .)
 254      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 255        Expression<out expType>               (. if (!Assignable(var.type, expType))
 256                                                   SemError("incompatible types in assignment");
 257                                                 CodeGen.Assign(var.type); .)
 258      ]                                       (. Table.Insert(var); .)
 259   .
 260 
 261 
 262   AssignmentOrCall                           (. int expType;
 263                                                 DesType des; .)
 264   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 265          identifier                          (. CodeGen.FrameHeader(); .)
 266          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 267       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 268                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 269          AssignOp
 270          Expression<out expType>             (. if (!Assignable(des.type, expType))
 271                                                 SemError("incompatible types in assignment");
 272                                                 CodeGen.Assign(des.type); .)
 273      ) WEAK ";"
 274   .
 275 
 276   Arguments<DesType des>                     (. int argCount = 0;
 277                                                 Entry fp = des.entry.firstParam; .)
 278   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 279        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 280        }
 281      ]                                       (. if (argCount != des.entry.nParams)
 282                                                   SemError("wrong number of arguments"); .)
 283   .
 284 
 285   OneArg<Entry fp>                           (. int argType; .)
 286   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 287                                                     SemError("argument type mismatch"); .)
 288      )
 289   .
 290 
 291   Designator<out DesType des>                (. string name;
 292                                                 int indexType; .)
 293   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 294                                                 if (!entry.declared)
 295                                                   SemError("undeclared identifier");
 296                                                 des = new DesType(entry);
 297                                                 if (entry.kind == Kinds.Var)
 298                                                   CodeGen.LoadAddress(entry); .)
 299      [     "["                               (. if (IsArray(des.type)) des.type--;
 300                                                 else SemError("unexpected subscript");
 301                                                 if (des.entry.kind != Kinds.Var)
 302                                                   SemError("unexpected subscript");
 303                                                 CodeGen.Dereference(); .)
 304               Expression<out indexType>      (. if (!IsArith(indexType))
 305                                                   SemError("invalid subscript type");
 306                                                 CodeGen.Index(); .)
 307 
 308            "]"
 309      ]
 310   .
 311 
 312   IfStatement<StackFrame frame>
 313                                              (. Label falseLabel = new Label(!known); .)
 314   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 315         Statement<frame>           (. falseLabel.Here(); .)
 316   .
 317 
 318 
 319   WhileStatement<StackFrame frame>
 320                                              (. Label loopExit  = new Label(!known);
 321                                                 Label loopStart = new Label(known); .)
 322   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 323      Statement<frame>              	     (. CodeGen.Branch(loopStart);
 324                                                 loopExit.Here(); .)
 325   .
 326 
 327   HaltStatement
 328   =  "halt"                                  (. CodeGen.LeaveProgram(); .)
 329      WEAK ";"
 330   .
 331 
 332   ReturnStatement              
 333   =  "return"				(. CodeGen.LeaveVoidFunction(); .)
 334     WEAK ";"
 335   .
 336 
 337   ReadStatement
 338   = (   "read"     "("   ReadList   ")"
 339       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 340     )
 341     WEAK ";"
 342   .
 343 
 344   ReadList
 345   = ReadElement { WEAK "," ReadElement }
 346   .
 347 
 348   ReadElement                                (. string str;
 349                                                 DesType des; .)
 350   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 351     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 352                                                   SemError("wrong kind of identifier");
 353                                                 switch (des.type) {
 354                                                   case Types.intType:
 355                                                   case Types.boolType:
 356                                                     CodeGen.Read(des.type); break;
 357                                                   default:
 358                                                     SemError("cannot read this type"); break;
 359                                                 } .)
 360   .
 361 
 362   WriteStatement
 363   = (   "write"     "("   WriteList   ")"
 364       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 365     )
 366     WEAK ";"
 367   .
 368 
 369   WriteList
 370   = WriteElement { WEAK "," WriteElement }
 371   .
 372 
 373   WriteElement                               (. int expType;
 374                                                 string str; .)
 375   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 376     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType))
 377                                                   SemError("cannot write this type");
 378                                                 switch (expType) {
 379                                                   case Types.intType:
 380                                                   case Types.boolType:
 381                                                     CodeGen.Write(expType); break;
 382                                                   default:
 383                                                     break;
 384                                                 } .)
 385   .
 386 
 387   Condition                                  (. int type; .)
 388   =  Expression<out type>                    (. if (!IsBool(type))
 389                                                   SemError("Boolean expression needed"); .)
 390   .
 391 
 392   Expression<out int type>                   (. int type2;
 393                                                 int op;
 394                                                 bool comparable; .)
 395   =  AddExp<out type>
 396      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 397                                                   case CodeGen.ceq: case CodeGen.cne:
 398                                                     comparable = Compatible(type, type2);
 399                                                     break;
 400                                                   default:
 401                                                     comparable = IsArith(type) && IsArith(type2);
 402                                                     break;
 403                                                 }
 404                                                 if (!comparable)
 405                                                   SemError("incomparable operands");
 406                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 407      ]
 408   .
 409 
 410   AddExp<out int type>                       (. int type2;
 411                                                 int op;
 412                                                 Label shortcircuit = new Label(!known); .)
 413   =                                          (. type = Types.noType; .)
 414      (   "+" Term<out type>                  (. if (!IsArith(type))
 415                                                   SemError("arithmetic operand needed"); .)
 416        | "-" Term<out type>                  (. if (!IsArith(type))
 417                                                   SemError("arithmetic operand needed");
 418                                                 CodeGen.NegateInteger(); .)
 419        | Term<out type>
 420      )
 421      { AddOp<out op>                         (. if (op == CodeGen.or)
 422                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 423        Term<out type2>                       (. switch (op) {
 424                                                   case CodeGen.or:
 425                                                     if (!IsBool(type) || !IsBool(type2))
 426                                                       SemError("boolean operands needed");
 427                                                     type = Types.boolType;
 428                                                     break;
 429                                                   default:
 430                                                     if (!IsArith(type) || !IsArith(type2)) {
 431                                                       SemError("arithmetic operands needed");
 432                                                       type = Types.noType;
 433                                                     }
 434                                                     CodeGen.BinaryOp(op);
 435                                                     break;
 436                                                 } .)
 437      }                                       (. shortcircuit.Here(); .)
 438   .
 439 
 440   Term<out int type>                         (. int type2;
 441                                                 int op;
 442                                                 Label shortcircuit = new Label(!known); .)
 443   =  Factor<out type>
 444      { MulOp<out op>                         (. if (op == CodeGen.and)
 445                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 446        Factor<out type2>                     (. switch (op) {
 447                                                   case CodeGen.and:
 448                                                     if (!IsBool(type) || !IsBool(type2))
 449                                                       SemError("boolean operands needed");
 450                                                     type = Types.boolType;
 451                                                     break;
 452                                                   default:
 453                                                     if (!IsArith(type) || !IsArith(type2)) {
 454                                                       SemError("arithmetic operands needed");
 455                                                       type = Types.noType;
 456                                                     }
 457                                                     CodeGen.BinaryOp(op);
 458                                                     break;
 459                                                 } .)
 460      }                                       (. shortcircuit.Here(); .)
 461   .
 462 
 463   Factor<out int type>                       (. type = Types.noType;
 464                                                 int size;
 465                                                 DesType des;
 466                                                 ConstRec con; .)
 467   =    Designator<out des>                 (. type = des.type;
 468                                               switch (des.entry.kind) {
 469                                                   case Kinds.Var:
 470                                                     CodeGen.Dereference();
 471                                                     break;
 472                                                   case Kinds.Con:
 473                                                     CodeGen.LoadConstant(des.entry.value);
 474                                                     break;
 475                                                   default:
 476                                                     SemError("wrong kind of identifier");
 477                                                     break;
 478                                                 } .)
 479                                         
 480      | Constant<out con>                     (. type = con.type;
 481                                                 CodeGen.LoadConstant(con.value); .)
 482      | "new" BasicType<out type>             (. type++; .)
 483          "[" Expression<out size>            (. if (!IsArith(size))
 484                                                   SemError("array size must be integer");
 485                                                 CodeGen.Allocate(); .)
 486          "]"
 487      | "!" Factor<out type>                  (. if (!IsBool(type)) SemError("boolean operand needed");
 488                                                 else CodeGen.NegateBoolean();
 489                                                 type = Types.boolType; .)
 490      | "(" Expression<out type> ")"
 491   .
 492 
 493   AddOp<out int op>                          (. op = CodeGen.nop; .)
 494   =    "+"                                   (. op = CodeGen.add; .)
 495      | "-"                                   (. op = CodeGen.sub; .)
 496      | "||"                                  (. op = CodeGen.or;  .)
 497   .
 498 
 499   MulOp<out int op>                          (. op = CodeGen.nop; .)
 500   =    "*"                                   (. op = CodeGen.mul; .)
 501      | "/"                                   (. op = CodeGen.div; .)
 502      | "%"                                   (. op = CodeGen.rem; .)
 503      | "&&"                                  (. op = CodeGen.and; .)
 504   .
 505 
 506   RelOp<out int op>                          (. op = CodeGen.nop; .)
 507   =    "=="                                  (. op = CodeGen.ceq; .)
 508      | "!="                                  (. op = CodeGen.cne; .)
 509      | "<"                                   (. op = CodeGen.clt; .)
 510      | "<="                                  (. op = CodeGen.cle; .)
 511      | ">"                                   (. op = CodeGen.cgt; .)
 512      | ">="                                  (. op = CodeGen.cge; .)
 513   .
 514 
 515   AssignOp = "=" .
 516 
 517   Ident<out string name>
 518   =  identifier                              (. name = token.val; .)
 519   .
 520 
 521   StringConst<out string str>
 522   =  stringLit                               (. str = token.val;
 523                                                 str = Unescape(str.Substring(1, str.Length - 2)); .)
 524   .
 525 
 526   CharConst<out int value>
 527   =  charLit                                 (. string str = token.val;
 528                                                 str = Unescape(str.Substring(1, str.Length - 2));
 529                                                 value = str[0]; .)
 530   .
 531 
 532   IntConst<out int value>
 533   =  number                                  (. try {
 534                                                   value = Convert.ToInt32(token.val);
 535                                                 } catch (Exception) {
 536                                                   value = 0; SemError("number out of range");
 537                                                 } .)
 538   .
 539 
 540 END Parva.
 541 

0 errors detected
2 warnings detected
